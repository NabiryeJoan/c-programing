# Write a C program that checks whether a given number is even or odd. The program
# should perform the following steps:
# 1. Prompt the user to enter a number.
# 2. Use an if-else statement to check if the number is even or odd.
# 3. Display an appropriate message to the user indicating whether the number is
# even or odd.
include <stdio.h>

int main() {
    int number;

    // Prompt the user to enter a number
    printf("Enter a number: ");
    scanf("%d", &number);

    // Check if the number is even or odd
    if (number % 2 == 0) {
        printf("%d is an even number.\n", number);
    } else {
        printf("%d is an odd number.\n", number);
    }

    return 0;
}
# we use the modulus operator % to check if the remainder of the number divided by 2 is equal to 0.
# If it is, then the number is even; otherwise, it is odd.
# The program then displays the appropriate message based on the result.

qtn 2:
# Write a C program that checks whether a given number is positive or negative. The
# program should perform the following steps:
# 1. Prompt the user to enter a number.
# 2. Use an if-else statement to check if the number is positive or negative.
# 3. Display an appropriate message to the user indicating whether the number is
# positive or negative.
# ans
#include <stdio.h>

int main() {
    int number;

    // Prompt the user to enter a number
    printf("Enter a number: ");
    scanf("%d", &number);

    // Check if the number is positive or negative
    if (number > 0) {
        printf("%d is a positive number.\n", number);
    } else if (number < 0) {
        printf("%d is a negative number.\n", number);
    } else {
        printf("The number is zero.\n");
    }

    return 0;
}
# we use the if-else statements to check whether the number is positive, negative, or zero.
# If the number is greater than 0, it is positive. If the number is less than 0, it is negative. Otherwise, it is zero. 
# The program then displays the appropriate message based on the result.

qtn 2:
# Write a C program that calculates the final grade for a student based on their scores
# in three exams. The program should perform the following steps:
# 1. Prompt the user to enter the scores for the three exams (each score should be
# between 0 and 100, inclusive).
# 2. Calculate the average of the three exam scores.
# 3. Determine the corresponding letter grade based on the average using the
# following grading scale:
# A. Average >= 90: A
# B. 80 <= Average < 90: B
# C. 70 <= Average < 80: C
# D. 60 <= Average < 70: D
# E. Average < 60: F
# 4. Display the average and the corresponding letter grade to the user.
ans
#include <stdio.h>

int main() {
    int score1, score2, score3;
    float average;

    // Prompt the user to enter the scores for the three exams
    printf("Enter the score for Exam 1 (between 0 and 100): ");
    scanf("%d", &score1);

    printf("Enter the score for Exam 2 (between 0 and 100): ");
    scanf("%d", &score2);

    printf("Enter the score for Exam 3 (between 0 and 100): ");
    scanf("%d", &score3);

    // Calculate the average of the three exam scores
    average = (score1 + score2 + score3) / 3.0;

    // Determine the corresponding letter grade based on the average
    char letterGrade;
    if (average >= 90) {
        letterGrade = 'A';
    } else if (average >= 80) {
        letterGrade = 'B';
    } else if (average >= 70) {
        letterGrade = 'C';
    } else if (average >= 60) {
        letterGrade = 'D';
    } else {
        letterGrade = 'F';
    }

    // Display the average and the corresponding letter grade
    printf("Average: %.2f\n", average);
    printf("Letter Grade: %c\n", letterGrade);

    return 0;
}
# we prompt the user to enter the scores for the three exams. 
# We calculate the average of the scores by summing them and dividing by 3.0 to ensure a floating-point result. Then, we use if-else statements to determine the corresponding letter grade based on the average. 
# Finally, we display the average and the corresponding letter grade to the user.

qtn 4:
# Write a C program that converts temperatures between Fahrenheit and Celsius. The
# program should perform the following steps:
# 1. Prompt the user to enter a temperature value and the temperature unit (F for
# Fahrenheit, C for Celsius).
# 2. Convert the temperature to the opposite unit (e.g., if the user entered
# Fahrenheit, convert it to Celsius, and vice versa) using the following formulas:
# ● Fahrenheit to Celsius: (temperature - 32) * 5 / 9
# ● Celsius to Fahrenheit: (temperature * 9 / 5) + 32
# 3. Display the converted temperature to the user.
ans
#include <stdio.h>

int main() {
    float temperature;
    char unit;

    // Prompt the user to enter a temperature value and the temperature unit
    printf("Enter the temperature value: ");
    scanf("%f", &temperature);

    printf("Enter the temperature unit (F for Fahrenheit, C for Celsius): ");
    scanf(" %c", &unit);

    // Convert the temperature to the opposite unit
    float convertedTemperature;
    if (unit == 'F' || unit == 'f') {
        convertedTemperature = (temperature - 32) * 5 / 9;
        printf("Converted temperature: %.2f Celsius\n", convertedTemperature);
    } else if (unit == 'C' || unit == 'c') {
        convertedTemperature = (temperature * 9 / 5) + 32;
        printf("Converted temperature: %.2f Fahrenheit\n", convertedTemperature);
    } else {
        printf("Invalid temperature unit entered.\n");
    }

    return 0;
}
# we prompt the user to enter a temperature value and the temperature unit. 
# We use if-else statements to check the unit entered and perform the appropriate conversion. 
# If the unit is Fahrenheit ('F' or 'f'), we convert it to Celsius using the formula (temperature - 32) * 5 / 9. If the unit is Celsius ('C' or 'c'),
#  we convert it to Fahrenheit using the formula (temperature * 9 / 5) + 32. 
# The converted temperature is then displayed to the user with the appropriate unit.


Question 5:
#  Leap Year Checker
# Write a C program that checks whether a given year is a leap year or not. The
# program should perform the following steps:
# 1. Prompt the user to enter a year.
# 2. Check if the entered year is a leap year or not based on the following rules:
# a. If the year is divisible by 4, it could be a leap year.
# b. However, if the year is divisible by 100, it is not a leap year, unless it is
# also divisible by 400. In that case, it is a leap year.

# 3. Display an appropriate message to the user indicating whether the year is a
# leap year or not.
ans
#include <stdio.h>

int main() {
    int year;

    // Prompt the user to enter a year
    printf("Enter a year: ");
    scanf("%d", &year);

    // Check if the entered year is a leap year or not
    if (year % 4 == 0) {
        if (year % 100 == 0) {
            if (year % 400 == 0) {
                printf("%d is a leap year.\n", year);
            } else {
                printf("%d is not a leap year.\n", year);
            }
        } else {
            printf("%d is a leap year.\n", year);
        }
    } else {
        printf("%d is not a leap year.\n", year);
    }

    return 0;
}
# We use nested if statements to check whether the entered year satisfies the conditions for a leap year. 
# If the year is divisible by 4, we check if it is also divisible by 100. If it is, we further check if it is divisible by 400. 
# If all these conditions are satisfied, we conclude that the year is a leap year. Otherwise, we determine that it is not a leap year. 
# The program then displays the appropriate message to the user.

qtn6:
# Write a C program that calculates the Body Mass Index (BMI) of a person based on
# their height and weight. The program should perform the following steps:
# 1. Prompt the user to enter their weight in kilograms.
# 2. Prompt the user to enter their height in meters.
# 3. Calculate the BMI using the following formula: BMI = weight / (height * height)
# 4. Determine the BMI category based on the calculated BMI using the following
# guidelines:
# A. BMI < 18.5: Underweight
# B. 18.5 <= BMI < 25: Normal weight
# C. 25 <= BMI < 30: Overweight
# D. BMI >= 30: Obesity
# 5. Display the calculated BMI and the corresponding category to the user.
ans
Copy code
#include <stdio.h>

int main() {
    float weight, height;
    float bmi;

    // Prompt the user to enter their weight in kilograms
    printf("Enter your weight in kilograms: ");
    scanf("%f", &weight);

    // Prompt the user to enter their height in meters
    printf("Enter your height in meters: ");
    scanf("%f", &height);

    // Calculate the BMI using the formula BMI = weight / (height * height)
    bmi = weight / (height * height);

    // Determine the BMI category based on the calculated BMI
    printf("BMI: %.2f\n", bmi);
    if (bmi < 18.5) {
        printf("Category: Underweight\n");
    } else if (bmi < 25) {
        printf("Category: Normal weight\n");
    } else if (bmi < 30) {
        printf("Category: Overweight\n");
    } else {
        printf("Category: Obesity\n");
    }

    return 0;
}
# we prompt the user to enter their weight in kilograms and their height in meters. 
# We calculate the BMI using the formula BMI = weight / (height * height). 
# Then, we use if-else statements to determine the BMI category based on the calculated BMI. 
# Finally, we display the calculated BMI and the corresponding category to the user.